rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Start by closing all access by default, then add what you need
    match /{document=**} {
      allow read, write: if false;
    }

    match /test/{docId} {
      allow read: if true;
      allow write: if false;
    }

    match /test_documents/{id} {
      allow update: if (request.auth != null &&
      resource.data.authorId == request.auth.uid);
    }

    // Add new rules here
    
    //1.Any authenticated user may create to-do items for themselves.
    
    match /todos/{id} {
      allow create: if (isSignedIn());
    }

    //2.Users can view, update and delete their own to-do items.
    
    match /todos/{id} {
      allow read, update, delete: if (isSignedIn() && isOwned());
    }

    //3.Any authenticated user may create a profile and view other users' profiles.
    
    match /users/{uid} {
      allow read, create: if (isSignedIn());
    }

    //4. Any authenticated user is allowed to edit their own profile.
    // Issue: owner can make admin yourself
    
    match /users/{uid} {
      allow update: if (isSignedIn() && isOwned() && request.resource.data.isAdmin == resource.data.isAdmin);
    }

     //5. Admin users can edit any user's profile.
     //6.Only the admin users can make other users admins.
    
    match /users/{uid} {
      allow update: if isAdmin();
    }

    // Helpers
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwned() {
      return resource.data.uid == request.auth.uid;
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin;
    }
  }
}